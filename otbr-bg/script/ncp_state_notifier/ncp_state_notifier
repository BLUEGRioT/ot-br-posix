#!/bin/sh
#
#  Copyright (c) 2017, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#   Description:
#       This script notifies about NCP state changes.
#
 
PID=$$
NAME="ncp_state_notifier"
 
DISPATCHER_PATH="/etc/ncp_state_notifier/dispatcher.d"
 
echo ${PID} > "/tmp/${NAME}.pid"
 
if [ -z ${IFACE} ]; then
    IFACE=wpan0
fi
 
OTBR_PATH="/io/openthread/BorderRouter/${IFACE}"
 
WATCH_DEVICE_ROLE="type='signal', interface=org.freedesktop.DBus.Properties, path=${OTBR_PATH}, member='PropertiesChanged'"
 
notify_about_state()
{
    logger -t "${NAME}[${PID}]" "Notifying about change state to: ${1} on the interface: ${2}"
 
    for SCRIPT in `find ${DISPATCHER_PATH} -type f`; do
        logger -t "${NAME}[${PID}]" "Running script: ${SCRIPT}"
        .${SCRIPT} ${1} ${2}
    done
}
 
process_output()
{
    local NEXT_LINE_IS_STATE=0
 
    while read -r LINE; do
        if echo ${LINE} | grep -q "DeviceRole"; then
            NEXT_LINE_IS_STATE=1
            continue
        fi
 
        if [ ${NEXT_LINE_IS_STATE} -eq 1 ]; then
            NEXT_LINE_IS_STATE=0
 
            STATE=`echo ${LINE} | cut -d'"' -f2`
            echo ${STATE} >/tmp/ncp_state_notifier_state
            read ROLE </tmp/ncp_state_notifier_state
            notify_about_state ${ROLE} ${IFACE}
        fi
    done
}
 
kill_child_processes()
{
    isTopmost=$1
    curPid=$2
    childPids=`ps -o pid --no-headers --ppid ${curPid}`
    for childPid in $childPids
    do
        kill_child_processes 0 $childPid
    done
 
    if [ $isTopmost -eq 0 ]; then
        kill -9 $curPid 2> /dev/null
    fi
}
 
echo "unknow" > /tmp/ncp_state_notifier_state
 
trap "kill_child_process 1 $$; exit 0" INT TERM EXIT
 
logger -t "${NAME}[${PID}]" "Start registering to dbus for Device Role"
 
dbus-monitor --system "${WATCH_DEVICE_ROLE}" | process_output
 
wait
 